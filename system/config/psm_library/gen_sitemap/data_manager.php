<?php class dataManager extends Controller { private $setting_name ='paladinSiteMapGenerator';private $dir_module ='psm_library/gen_sitemap/';private $psm_helper;private $ssb_data=false;function __construct(){ global $registry;parent::__construct($registry);if($this->isPaladin()){ require_once DIR_CONFIG.'ssb_library/ssb_data.php';$this->ssb_data=ssb_data::getInstance();} require_once DIR_CONFIG.$this->dir_module.'psm_helper.php';$this->psm_helper=psm_helper::getInstance();} static private $Instance =NULL;public function isPaladin(){ $this->load->model('setting/setting');$setting=$this->model_setting_setting->getSetting('superseobox');if($setting){ return true;}else{ return false;} } static public function getInstance() { if(self::$Instance==NULL){ $class=__CLASS__;self::$Instance=new $class;} return self::$Instance;} public function get_data(){ $data=array( 'version' => '1.7.0','entity' => $this->get_Entites(),'categoryEntity'=> $this->get_CategoryEntites(),'clientData' => $this->get_ClientData() );return $data;} private function get_ClientData(){ $clientData=array( 'name' => '','id_order' => '','e_mail'=> '' );return $clientData;} public function setClientData($name,$id_order,$e_mail){ $setting=$this->getSetting();$setting['clientData']=array( 'name' => $name,'id_order'=> $id_order,'e_mail'=> $e_mail );$this->setSetting($setting);} public function getSetting($param=false){ $this->load->model('setting/setting');$setting=$this->model_setting_setting->getSetting($this->setting_name);if(!$setting){return false;} $respond;if($param){ $respond=$setting[$param];}else{ $respond=$setting;} return $respond;} public function setSetting($setting){ $this->psm_helper->setFunction(array('fns'=> 'setSetting','ac'=> true,'ad'=> $setting));} public function delSetting(){ $this->psm_helper->setFunction(array('fns'=> 'delSetting','ac'=> true,'ad'=> true));} private function get_Entites(){ $entities=array( 'sitemap'=> array( 'product' => array( 'auto'=> false,'data'=> array(),'setting'=> array( 'mode'=> 'default','all_language'=> 0,'freq' => 'weekly','prioritet' => 10 ),'status'=>array(array('store_id'=> 0,'status'=> 0)) ),'category' => array( 'auto'=> false,'data'=> array(),'setting'=> array( 'mode'=> 'default','all_language'=> 0,'freq' => 'month','prioritet' => 10 ),'status'=>array(array('store_id'=> 0,'status'=> 0)) ),'brand' => array( 'auto'=> false,'data'=> array(),'setting'=> array( 'all_language'=> 0,'freq' => 'month','prioritet' => 5 ),'status'=>array(array('store_id'=> 0,'status'=> 0)) ),'info' => array( 'auto'=> false,'data'=> array(),'setting'=> array( 'all_language'=> 0,'freq' => 'month','prioritet' => 5 ),'status'=>array(array('store_id'=> 0,'status'=> 0)) ) ) );return $entities;} private function get_CategoryEntites(){ $entities=array( 'sitemap'=> array('auto'=> false,'status'=>false) );return $entities;} public function get_MD_Entites(){ $MD_Entites=array( 'sitemap'=> array( 'product' => array('table'=> 'review') ) );return $MD_Entites;} public function get_MD_CategoryEntites(){ $MD_CategoryEntites=array( 'sitemap'=> array( 'type' => 'generator','icon' => 'heart','column' => '','clear' => array('all','auto_gen') ) );return $MD_CategoryEntites;} public function get_MD_EntitiesInDB($param=array()){ $MD_EntitiesInDB=array( 'sitemap' => array( 'product' => array('table'=> 'product','name_id'=> 'product_id','clear'=> array( 'column' => 'sitemap_file','condition'=> '' ),'save' => array( 'column' => 'sitemap_file' ) ),'category'=> array('table'=> 'category','name_id'=> 'category_id','clear'=> array( 'column' => 'sitemap_file','condition'=> '' ),'save' => array( 'column' => 'sitemap_file' ) ),'brand' => array('table'=> 'manufacturer','name_id'=> 'manufacturer_id','clear'=> array( 'column' => 'sitemap_file','condition'=> '' ),'save' => array( 'column' => 'sitemap_file' ) ),'info' => array('table'=> 'information_description','name_id'=> 'information_id','clear'=> array( 'column' => 'sitemap_file','condition'=> '' ),'save' => array( 'column' => 'sitemap_file' ) ) ) );$entityCategory=$entityName='all';if(count($param)){list($entityCategory,$entityName)=$param;} $respond=array();if($entityCategory=='all'){ $respond=$MD_EntitiesInDB;}else{ if($entityName=='all'){ $respond=$MD_EntitiesInDB[$entityCategory];}else{ $MD_EntityInDB=$MD_EntitiesInDB[$entityCategory][$entityName];$respond=array($entityCategory=> $MD_EntityInDB);} } return $respond;} public function getCPBI_item($CPBI,$id_item){ $this->load->model('psmsitemapgenerator/index');$CPBI_item=$this->model_psmsitemapgenerator_index->getCPBI_item($CPBI,$id_item);return $CPBI_item;} public function getCPBI($CPBI,$categoryEntity='',$gen_pack_number=0){ $this->load->model('psmsitemapgenerator/index');$data_CPBI=$this->model_psmsitemapgenerator_index->getCPBI($CPBI,$categoryEntity,$gen_pack_number);return $data_CPBI;} public function getTotalItems($CPBI,$entity_category='',$max=false){ if($max){ $max=array();$max[]=$this->getTotalItems('product');$max[]=$this->getTotalItems('category');$max[]=$this->getTotalItems('brand');$max[]=$this->getTotalItems('info');return max($max);} if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'.';} $total=$this->cache->get('ssb.total.'.$entity_category_forCache.$CPBI);if (isset($total) AND is_int($total)) { return $total;} if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'_';} if (isset($_SESSION['ssb_total'.$entity_category_forCache.$CPBI])) { return $_SESSION['ssb_total'.$entity_category_forCache.$CPBI];} $total=0;switch ($CPBI) { case 'product':$this->load->model('catalog/product');$total=$this->model_catalog_product->getTotalProducts();break;case 'category':$this->load->model('catalog/category');$total=$this->model_catalog_category->getTotalCategories();break;case 'brand':$this->load->model('catalog/manufacturer');$total=$this->model_catalog_manufacturer->getTotalManufacturers();break;case 'info':$this->load->model('catalog/information');$total=$this->model_catalog_information->getTotalInformations();break;case 'STAN_urls':$total=42;break;case 'CPBI_urls':$total+=$this->getTotalItems('product');$total+=$this->getTotalItems('category');$total+=$this->getTotalItems('brand');$total+=$this->getTotalItems('info');break;case 'all':$total+=$this->getTotalItems('product');$total+=$this->getTotalItems('category');$total+=$this->getTotalItems('brand');$total+=$this->getTotalItems('info');break;} if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'.';} $this->cache->set('ssb.total.'.$entity_category_forCache.$CPBI,$total);if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'_';} $_SESSION['ssb_total'.$entity_category_forCache.$CPBI]=$total;return $total;} public function getGenPack($gen_pack_number,$CPBI,$entity_category=''){ $gen_limit=$this->getPackLimit($CPBI,$entity_category);$gen_pack=array( 'start'=> $gen_pack_number*$gen_limit,'limit'=> $gen_limit );return $gen_pack;} public function getPackLimit($CPBI,$entity_category=''){ $setting=$this->getSetting('entity');$act_lang=$this->psm_helper->getActiveLang();$pack_limit=800;$act_lang=$act_lang===0 ? 1:$act_lang;if(!$setting['sitemap'][$CPBI]['setting']['all_language']){ $act_lang=1;} return $pack_limit / $act_lang;} public function getGenPackTotal($CPBI,$entity_category=''){ $totalItems=$this->getTotalItems($CPBI,$entity_category);$gen_limit =$this->getPackLimit($CPBI,$entity_category);if($totalItems > $gen_limit){ $genPackTotal=ceil($totalItems/$gen_limit);}else{ $genPackTotal=1;} return $genPackTotal;} public function getTotalGenerate(){ if(isset($_SESSION['ssb_totalGenerateValue'])){ $totalGenerateValue=$_SESSION['ssb_totalGenerateValue'];}else{ $totalGenerateValue=array( 'count'=> 0,'time'=> 0 );} return $totalGenerateValue;} public function addTotalGenerate($count,$time=0){ if(isset($_SESSION['ssb_totalGenerateValue'])){ $totalGenerateValue=$_SESSION['ssb_totalGenerateValue'];$value=array( 'count'=> $totalGenerateValue['count']+$count,'time'=> $totalGenerateValue['time']+$time );}else{ $value=array( 'count'=> $count,'time'=> $time );} $_SESSION['ssb_totalGenerateValue']=$value;} public function setTotalGenerate($count,$time=0){ $value=array( 'count'=> $count,'time'=> $time );$_SESSION['ssb_totalGenerateValue']=$value;} public function getMatadata($data='all',$param=''){ $respond=array();if($data=='all'){ $respond['Entites'] =$this->get_MD_Entites();$respond['CategoryEntites']=$this->get_MD_CategoryEntites();$respond['CPBI'] =$this->get_MD_CPBI();$respond['EntitiesInDB']=$this->get_MD_EntitiesInDB();}else{ $func ='get_MD_'.$data;$respond=$this->$func($param);} return $respond;} public function clearCache(){ $files=glob(DIR_CACHE.'cache.ssb.*');if ($files) { foreach ($files as $file) { if (file_exists($file)) { unlink($file);clearstatcache();} } } } public function setCategoryEntityStatus(){ $setting =$this->getSetting();foreach($setting['categoryEntity'] as $entity_cat=> $val){ $status=$this->getEntityStatus($entity_cat);$setting['categoryEntity'][$entity_cat]['status']=$status;} $this->setSetting($setting);} public function getEntityStatus($entity_cat,$entity='all',$internal_entity=''){ $setting =$this->getSetting();if(!$setting){return false;} $status=false;if($entity=='all'){ foreach($setting['entity'][$entity_cat] as $entity=> $val){ if(isset($val['status']) AND $val['status']) $status=true;} }else{ if($internal_entity){ $status=$setting['entity'][$entity_cat][$entity]['data'][$internal_entity]['status'];}else{ $status=$setting['entity'][$entity_cat][$entity]['status'];} } return $status;} private function updateStatusArray($status,$array,$store_id){ $i=0;$found=false;foreach($array as $ss){ if($ss['store_id']==$store_id){ $array[$i]['status']=$status;$found=true;} $i++;} if(!$found){ $array[]=array('store_id'=> $store_id,'status'=> $status);} return $array;} public function setEntityStatus($status,$entity_cat,$entity='all',$store_id=0){ $setting =$this->getSetting();if($entity=='all'){ foreach($setting['entity'][$entity_cat] as $entity_=> $val){ $array=$setting['entity'][$entity_cat][$entity_]['status'];$setting['entity'][$entity_cat][$entity_]['status']=$this->updateStatusArray($status,$array,$store_id);} }else{ $array=$setting['entity'][$entity_cat][$entity]['status'];$setting['entity'][$entity_cat][$entity]['status']=$this->updateStatusArray($status,$array,$store_id);} $this->setSetting($setting);} public function getTotalPower(){ $seopower=0;if($this->isPaladin() AND $this->ssb_data){ $seopower=$this->ssb_data->getTotalPower();} $seopower+=$this->getPowerOfSitemap();return $seopower;} public function getPowerOfSitemap(){ $powerEntities=$this->get_Power_of_Entities();$setting =$this->getSetting();$seoPower=0;foreach($setting['entity'] as $categorEntity=> $entities){ foreach($entities as $entity=> $val){ $status=0;foreach($val['status'] as $ss){ if($ss['status'])$status=1;} if($status){$seoPower+=$powerEntities[$categorEntity][$entity];} } } return $seoPower;} public function get_Power_of_Entities(){ $power=array( 'sitemap' => array( 'product' => 2,'category'=> 2,'brand' => 1,'info' => 1,'standard'=> 0 ) );return $power;} public function getStores($store_id=false){ if($store_id !==false){ return $this->getStoreId($store_id);} $this->language->load('setting/store');$this->load->model('setting/store');$stores=array();$stores[]=array( 'store_id'=> 0,'name' => $this->config->get('config_name').$this->language->get('text_default') );$results=$this->model_setting_store->getStores();foreach ($results as $result) { $stores[]=array( 'store_id'=> $result['store_id'],'name' => $result['name'],'url' => $result['url'],'ssl' => $result['ssl'] );} return $stores;} public function getStoreId($store_id,$stores=false){ $stores=$stores ? $stores:$this->getStores();foreach($stores as $store){ if($store['store_id']==$store_id){ return $store;} } return false;} public function getCurrentStoreURL($connection='NONSSL'){ if(isset($this->request->post['store_id'])){ $store_id=$this->request->post['store_id'];}else{ $store_id=0;} if($store_id==0){ $http=HTTP_CATALOG;$https=HTTPS_CATALOG;}else{ $store=$this->getStoreId($store_id,$this->getStores());$http=rtrim($store['url'],'/').'/';$https=rtrim($store['ssl'],'/').'/';} if ($connection=='NONSSL') { $url=$http;} else { $url=$https;} return $url;} public function getIndexFiles($html=true){ $index_files=array();$path=DIR_CATALOG.'../sitemap*.xml';$files=glob($path);if($files AND count($files)){ foreach($files as $file){ if (file_exists($file)) { $file_name=basename($file);$store_id=(int)preg_replace("/[^0-9]/","",$file_name);$store=$this->getStores($store_id);$index_files[]=array('url'=> HTTP_CATALOG.$file_name,'store'=> $store['name']);} } }else{return $index_files;} if($html){ if(!count($index_files)) return '';$html='<ul>';foreach($index_files as $file){ $html.='<li>';$url=$file['url'];$name=$file['store'];$html.='<a href="'. $url .'" target="_blank">Open Sitemap for '.$name.'</a>';$html.='</li>';} $html.='</ul>';$index_files=$html;} return $index_files;} public function setTable(){ $this->changeTables($this->get_DB_change());} private function get_DB_change(){ $DB_change=array( array( 'name'=> 'product','columns'=> array('sitemap_file'),'types'=> array('int(4)') ),array( 'name'=> 'category','columns'=> array('sitemap_file'),'types'=> array('int(4)') ),array( 'name'=> 'information_description','columns'=> array('sitemap_file'),'types'=> array('int(4)') ),array( 'name'=> 'manufacturer','columns'=> array('sitemap_file'),'types'=> array('int(4)') ) );return $DB_change;} private function changeTables($defChangeTable) { foreach($defChangeTable as $key=> $val){ $table =$val['name'];$columns =$val['columns'];$types =$val['types'];$sprints =isset($val['sprints']) ? $val['sprints']:false;if(!$this->isTable($table)){ $prim =isset($val['prim']) ? $val['prim']:false;$end=$val['end'];$this->makeTable($table,$columns,$types,$sprints,$prim,$end);}else{ foreach($columns as $key_c=> $column){ if(!$this->isColumn($table,$column)){ $type =isset($types[$key_c]) ? $types[$key_c]:$types[0];$sprint=false;if($sprints AND isset($sprints[$key_c]) AND $sprints[$key_c] !='') $sprint=$sprints[$key_c];$this->makeColumn($table,$column,$type,$sprint);} } } if(isset($val['autoFillFunc'])){ eval($val['autoFillFunc']);} } } private function isColumn($table,$column) { $issql=" SHOW COLUMNS FROM `".DB_PREFIX.$table."`  LIKE '".$column."'";$is_column=$this->db->query($issql);$length=0;foreach ($is_column->rows as $index) $length++;return $length ? true:false;} private function makeColumn($table,$column,$type,$sprint) { if(isset($sprint) AND $sprint) $type=sprintf($type,eval('return '.$sprint));$this->db->query("ALTER TABLE `".DB_PREFIX.$table."` ADD `".$column."` ".$type.";" );} private function makeTable($name,$columns,$types,$sprints,$prim,$end) { $column_text='';foreach($columns as $key_c=> $column){ $column_text.=" `".$column."` ";$type =isset($types[$key_c]) ? $types[$key_c]:$types[0];$sprint =false;if($sprints AND isset($sprints[$key_c]) AND $sprints[$key_c] !=''){ $sprint=$sprints[$key_c];$type=sprintf($type,eval('return '.$sprint));} $column_text.=$type.", ";} if($prim){ $column_text.=$prim." ";}else{ $column_text=rtrim ($column_text);$column_text=rtrim ($column_text,',');} $query_text="CREATE TABLE IF NOT EXISTS `".DB_PREFIX.$name."` (".$column_text." ) ".$end.";";$query=$this->db->query($query_text);} public function isTable($table) { $custom_errno=DB_DRIVER.'_errno';if(DB_DRIVER !='mysql' AND DB_DRIVER !='mysqli'){ trigger_error('Error: Not support of DB -> '.DB_DRIVER.' in the function "isTable" <br />');exit();} if(DB_DRIVER=='mysqli'){ $mysqli=new mysqli(DB_HOSTNAME,DB_USERNAME,DB_PASSWORD,DB_DATABASE);$res=mysqli_query($mysqli,"SELECT * FROM `".DB_PREFIX.$table."` LIMIT 1");$err_no=$custom_errno($mysqli);}elseif(DB_DRIVER=='mysql'){ $res=mysql_query("SELECT * FROM `".DB_PREFIX.$table."` LIMIT 1");$err_no=$custom_errno();} return ($err_no !='1146' && $res=true);} } ?>
