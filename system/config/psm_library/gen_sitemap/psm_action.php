<?php class psm_action extends Controller { private $module_path ='module/psmsitemapgenerator';function __construct(){ global $registry;parent::__construct($registry);$this->load->model('setting/setting');} static private $Instance =NULL;static public function getInstance() { if(self::$Instance==NULL){ $class=__CLASS__;self::$Instance=new $class;} return self::$Instance;} public function getUrls(){ $token=$this->session->data['token'];$urls=array( 'modules'=>$this->url->link('extension/module','token='.$token,'SSL'),'module'=> $this->url->link($this->module_path,'token='.$token.'&iframe=true','SSL') );return $urls;} public function isSetting($name){ $set=$this->model_setting_setting->getSetting($name);return !$set ? false:true;} public function getSetting($name){ return $this->model_setting_setting->getSetting($name);} public function get_param() { if (isset($_SERVER['HTTP_X_FORWARDED_HOST']) AND $host=$_SERVER['HTTP_X_FORWARDED_HOST']){ $elements=explode(',',$host);$host=trim(end($elements));}else{ if (!$host=$_SERVER['HTTP_HOST']){ if (!$host=$_SERVER['SERVER_NAME']){ $host=!empty($_SERVER['SERVER_ADDR']) ? $_SERVER['SERVER_ADDR']:'';} } } $host=preg_replace('/:\d+$/','',$host);return trim($host);} public function delMaps() { $mainSitemap_path=DIR_CATALOG.'../sitemap.xml';if (file_exists($mainSitemap_path)) {unlink($mainSitemap_path);clearstatcache();} $current_sitemap_path=DIR_CATALOG.'../sitemaps';$this->recursiveDelete($current_sitemap_path);} private function recursiveDelete($str){ if(is_file($str)){ return @unlink($str);} elseif(is_dir($str)){ $scan=glob(rtrim($str,'/').'/*');foreach($scan as $index=>$path){ $this->recursiveDelete($path);} return @rmdir($str);} } } ?>
