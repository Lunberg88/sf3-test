<?php  class sitemap_generator extends Controller { private $dataManager; private $psm_helper; private $ssb_review; private $dir_module = 'psm_library/gen_sitemap/'; private $seo_url; private $defLanguage; private $sitemap_store_path = 'sitemaps/sitemap-%s/'; private $current_sitemap_path = ''; private $seo_data = array (); private $def_data = array ('entity_cat'=>'', 'entity_name'=>'', 'CPBI'=>'all', 'id_entity'=>'', 'testgenerator'=>false, 'pack'=>0); function __construct () { global $registry; parent :: __construct ($registry); $this -> setCurrentSitemapPath (); require_once DIR_CONFIG . $this -> dir_module . 'data_manager.php'; $this -> dataManager = dataManager :: getInstance (); global $vqmod; if ($this -> dataManager -> isPaladin ()) { if (isset ($vqmod)) { require_once $vqmod -> modCheck (DIR_CONFIG . 'ssb_library/catalog/controller/common/ssb_seo_url.php'); } else { require_once VQMod :: modCheck (DIR_CONFIG . 'ssb_library/catalog/controller/common/ssb_seo_url.php'); } $this -> seo_url = ssb_seo_url :: getInstance (); } else { if (isset ($vqmod)) { require_once $vqmod -> modCheck (DIR_CATALOG . 'controller/common/seo_url.php'); } else { require_once VQMod :: modCheck (DIR_CATALOG . 'controller/common/seo_url.php'); } $this -> seo_url = new ControllerCommonSeoUrl ($registry); } require_once DIR_CONFIG . $this -> dir_module . 'psm_helper.php'; $this -> psm_helper = psm_helper :: getInstance (); $this -> defLanguage = $this -> psm_helper -> getDefaultLanguage (); } static private $Instance = NULL; static public function getInstance () { if (self :: $Instance == NULL) { $class = __CLASS__; self :: $Instance = new $class; } return self :: $Instance; } private function setCurrentSitemapPath ($store_id = false) { $this -> current_sitemap_path = DIR_CATALOG . '../sitemaps/sitemap/'; if (!is_dir (DIR_CATALOG . '../sitemaps')) { mkdir (DIR_CATALOG . '../sitemaps'); copy (DIR_CONFIG . $this -> dir_module . 'source/base.xsl', DIR_CATALOG . '../sitemaps/base.xsl'); copy (DIR_CONFIG . $this -> dir_module . 'source/index.xsl', DIR_CATALOG . '../sitemaps/index.xsl'); copy (DIR_CONFIG . $this -> dir_module . 'source/jquery.tablesorter.min.js', DIR_CATALOG . '../sitemaps/jquery.tablesorter.min.js'); copy (DIR_CONFIG . $this -> dir_module . 'source/desc.gif', DIR_CATALOG . '../sitemaps/desc.gif'); copy (DIR_CONFIG . $this -> dir_module . 'source/asc.gif', DIR_CATALOG . '../sitemaps/asc.gif'); copy (DIR_CONFIG . $this -> dir_module . 'source/bg.gif', DIR_CATALOG . '../sitemaps/bg.gif'); } if (!is_dir ($this -> current_sitemap_path)) { mkdir ($this -> current_sitemap_path); } if (isset ($this -> request -> post['store_id']) AND $this -> request -> post['store_id'] != 0) { $this -> current_sitemap_path = $this -> createSitemapStoreFolder ($this -> request -> post['store_id']); } if ($store_id !== false AND $store_id != 0) { $this -> current_sitemap_path = $this -> createSitemapStoreFolder ($store_id); } } public function clear ($entityData) { $time_start = microtime (true); $count = 0; $param = array ($entityData['category']['name'], $entityData['entity']['name']); $MD_EntityInDB = $this -> dataManager -> getMatadata ('EntitiesInDB', $param); foreach ($MD_EntityInDB as $category=>$val) { if (!isset ($val['clear']) OR !is_array ($val['clear'])) { continue; } if ($val['clear']['column'] == 'all') { $sql = "DELETE FROM " . DB_PREFIX . $val['table']; } else { $sql = "UPDATE " . DB_PREFIX . $val['table'] . " SET "; if (strpos ($val['clear']['column'], ',') !== false) { $columns = explode (',', $val['clear']['column']); foreach ($columns as $column) { if (strpos ($column, '=') !== false) { $sql .= $column . ','; } else { $sql .= $column . " = '',"; } } $sql = substr ($sql, 0, - 1) . ' '; } else { $sql .= $val['clear']['column'] . " = ''"; } } if ($val['clear']['condition']) { $sql .= "  WHERE " . $val['clear']['condition']; } $do_clear = $this -> db -> query ($sql); $count += $this -> db -> countAffected (); } $time_end = microtime (true); $time = $time_end - $time_start; return array ('total_time'=>$time, 'total_count'=>$count); } public function autoGenerate ($type, $item_id) { $setting = $this -> dataManager -> getSetting (); $auto = $setting['entity']['sitemap'][$type]['auto']; $this -> setting = $setting['entity']['sitemap'][$type]['setting']; if (!$auto) { return; } $data = array ('id'=>$item_id, 'url'=>'', 'freq'=>$this -> setting['freq'], 'prioritet'=>$this -> setting['prioritet']); $data_action = $this -> getAction ($type, $item_id); foreach ($this -> dataManager -> getStores () as $store) { $this -> setCurrentSitemapPath ($store['store_id']); if ($data_action['sitemap_file']) { $files = $this -> getExistingFiles ($data_action['sitemap_file'], $type); if ($files) { foreach ($files as $l_code=>$file) { $data['url'] = $this -> getItemLink ($item_id, $type, $l_code); $this -> sitemapManager ($data_action['action'], $file, $data); $this -> writeNumberXMLToDB ($data_action['sitemap_file'], $item_id, $type); } } else { $this -> createNewURL ($type, $item_id, $data, $data_action); } } else { $this -> createNewURL ($type, $item_id, $data, $data_action); } } $this -> makeIndexFile (); } private function sitemapManager ($action, $file, $data) { if (file_exists ($file)) { $dom = new DomDocument ('1.0', 'utf-8'); $dom -> preserveWhiteSpace = false; $dom -> formatOutput = true; $dom -> load ($file); } else { $dom = $this -> setXMLHeader (); $dom -> preserveWhiteSpace = true; $dom -> formatOutput = true; if ($action == 'delete') { return; } } $xpath = new DOMXPath ($dom); $xpath -> registerNamespace ('sm', "http://www.sitemaps.org/schemas/sitemap/0.9"); $id = $data['id']; switch ($action) { case 'insert': $dom = $this -> insert ($xpath, $dom, $data, $file); break; case 'update': $url = $xpath -> query ("//sm:url[@id='$id']/*"); if (!$url -> length) { $dom = $this -> insert ($xpath, $dom, $data, $file); } else { $dom = $this -> update ($xpath, $dom, $data, $file); } break; case 'delete': $url = $xpath -> query ("//sm:url[@id='$id']"); if ($url -> length) { $url -> item (0) -> parentNode -> removeChild ($url -> item (0)); } break; } $dom -> save ($file); } private function insert ($xpath, $dom, $data, $file) { if (file_exists ($file)) { $urlset = $xpath -> query ('//sm:urlset') -> item (0); } else { $urlset = $xpath -> query ('//urlset') -> item (0); } $url = $urlset -> appendChild ($dom -> createElement ('url')); $id = $dom -> createAttribute ('id'); $id -> value = $data['id']; $url -> appendChild ($id); $loc = $url -> appendChild ($dom -> createElement ('loc')); $loc -> appendChild ($dom -> createTextNode ($data['url'])); $lastmod = $url -> appendChild ($dom -> createElement ('lastmod')); $lastmod -> appendChild ($dom -> createTextNode (date ("Y-m-d"))); $changefreq = $url -> appendChild ($dom -> createElement ('changefreq')); $changefreq -> appendChild ($dom -> createTextNode ($data['freq'])); $priority = $url -> appendChild ($dom -> createElement ('priority')); $priority -> appendChild ($dom -> createTextNode ($data['prioritet'] / 10)); return $dom; } private function update ($xpath, $dom, $data, $file) { $id = $data['id']; $url = $xpath -> query ("//sm:url[@id='$id']/*"); for ($i = 0; $i < $url -> length; ++$i) { switch ($url -> item ($i) -> nodeName) { case 'loc': $url -> item ($i) -> nodeValue = str_replace ('&', '&amp;', $data['url']); break; case 'lastmod': $url -> item ($i) -> nodeValue = date ("Y-m-d"); break; case 'changefreq': $url -> item ($i) -> nodeValue = $data['freq']; break; case 'priority': $url -> item ($i) -> nodeValue = $data['prioritet'] / 10; break; } } return $dom; } private function createNewURL ($type, $item_id, $data, $data_action) { if ($this -> setting['all_language']) { $languages = $this -> psm_helper -> getLanguages (); foreach ($languages as $l_code=>$l_data) { $fileData = $this -> getLastFiles ($type, $l_code); $data['url'] = $this -> getItemLink ($item_id, $type, $l_code); $this -> sitemapManager ($data_action['action'], $fileData['name'], $data); $this -> writeNumberXMLToDB ($fileData['number'], $item_id, $type); } } else { $fileData = $this -> getLastFiles ($type); $data['url'] = $this -> getItemLink ($item_id, $type, 'no_code'); $this -> sitemapManager ($data_action['action'], $fileData['name'], $data); $this -> writeNumberXMLToDB ($fileData['number'], $item_id, $type); } } private function getAction ($type, $item_id) { $db_info = $this -> dataManager -> getMatadata ('EntitiesInDB', array ('sitemap', $type)); $db_info = $db_info['sitemap']; $sql = "SELECT * FROM " . DB_PREFIX . $db_info['table'] . " WHERE " . $db_info['name_id'] . " = " . (int) $item_id . ";"; $query = $this -> db -> query ($sql); $sitemap_file = ''; if (count ($query -> rows)) { $sitemap_file = $query -> rows[0]['sitemap_file']; $action = $sitemap_file ? 'update' : 'insert'; } else { $action = 'delete'; } return array ('action'=>$action, 'sitemap_file'=>$sitemap_file); } private function getExistingFiles ($sitemap_file, $type) { $files = array (); if ($sitemap_file) { $files['no_code'] = "sitemap-" . $type . "-" . $sitemap_file . ".xml"; $languages = $this -> psm_helper -> getLanguages (); foreach ($languages as $l_code=>$l_data) { $files[$l_code] = "sitemap-" . $type . "-" . $l_code . "-" . $sitemap_file . ".xml"; } } $result = array (); if (count ($files)) { foreach ($files as $l_code=>$file) { $path_file = $this -> current_sitemap_path . $file; if (file_exists ($path_file)) { $result[$l_code] = $path_file; } } } else { return false; } return count ($result) ? $result : false; } private function getLastFiles ($type, $l_code = '') { $l_code = $l_code ? '-' . $l_code : ''; $path = $this -> current_sitemap_path . 'sitemap-' . $type . $l_code . '-*.xml'; $files = glob ($path); $result = array (); if ($files AND count ($files)) { $file_name = basename (end ($files)); $number = (int) preg_replace ("/[^0-9]/", "", $file_name); } else { $file_name = 'sitemap-' . $type . $l_code . '-1.xml'; $number = 1; } return array ('number'=>$number, 'name'=>$this -> current_sitemap_path . $file_name); } public function generate ($data) { $time_start = microtime (true); extract (array_merge ($this -> def_data, $data)); $res_count = 0; $res_seo_data = array (); $this -> doGenerate ($entity_cat, $entity_name, $id_entity, $testgenerator, $pack); $res_count = $this -> g_count; $res_seo_data = $this -> seo_data; $time_end = microtime (true); $time = $time_end - $time_start; return array ('time'=>$time, 'count'=>$res_count, 'seo_data'=>$res_seo_data); } public function doGenerate ($entity_cat, $CPBI, $id_entity = '', $testgenerator, $pack) { $this -> setVars_Common ($entity_cat, $CPBI, $testgenerator, $pack); if ($id_entity) { $CPBI_item = $this -> dataManager -> getCPBI_item ($CPBI, $id_entity); $data = $CPBI_item['data'][$id_entity]; if ($data['sitemap_file']) { } else { } if ($this -> status) { $this -> g_count++; } } else { $data = $this -> dataManager -> getCPBI ($CPBI, $entity_cat, $this -> pack); $itemData = $data['data']; if (!count ($itemData)) { return false; } $languages = $this -> psm_helper -> getLanguages (); $numberOfLang = count ($languages); $i = 0; foreach ($languages as $l_code=>$l_data) { $this -> g_count = 0; $this -> setXMLHeader (); if (!$this -> setting['all_language']) { $fileData = $this -> getNewFilename ($this -> CPBI, ''); $l_code = $this -> defLanguage; } else { if (count ($languages) == 1) { $fileData = $this -> getNewFilename ($this -> CPBI, ''); } else { $fileData = $this -> getNewFilename ($this -> CPBI, $l_code); } } foreach ($itemData as $id_entity=>$data) { $this -> makeUrlElement ($data, $id_entity, $l_code); if ($this -> testgenerator) { if ($this -> g_count > 20) { break; } } elseif (!$this -> testgenerator) { $this -> writeNumberXMLToDB ($fileData['number'], $id_entity, $this -> CPBI); } } if (!$this -> testgenerator) { $this -> dom -> formatOutput = true; $this -> dom -> save ($this -> current_sitemap_path . $fileData['name']); } $i++; if (!$this -> setting['all_language']) { break; } } if ($this -> testgenerator) { $this -> endSeoData ($CPBI); } } } private function setXMLHeader () { $this -> dom = new DomDocument ('1.0', 'utf-8'); $this -> dom -> appendChild ($this -> dom -> createProcessingInstruction ('xml-stylesheet', 'type="text/xsl" href="../base.xsl"')); $this -> urlset = $this -> dom -> appendChild ($this -> dom -> createElement ('urlset')); $xmlns = $this -> dom -> createAttribute ('xmlns'); $xmlns -> value = 'http://www.sitemaps.org/schemas/sitemap/0.9'; $this -> urlset -> appendChild ($xmlns); return $this -> dom; } private function createSitemapStoreFolder ($store_id) { $folder_store_path = DIR_CATALOG . '../' . sprintf ($this -> sitemap_store_path, $store_id); $folder_main_path = $this -> current_sitemap_path; if (!is_dir ($folder_store_path)) { mkdir ($folder_store_path); } return $folder_store_path; } public function delFile ($type = '', $file = '') { if ($file) { if (file_exists ($file)) { $path = $this -> current_sitemap_path . $file; unlink ($path); clearstatcache (); } return; } if ($type != '' AND $type != 'all') { $path = $this -> current_sitemap_path . 'sitemap-' . $type . '-*.xml'; $files = glob ($path); if ($files AND count ($files)) { foreach ($files as $file) { if (file_exists ($file)) { unlink ($file); clearstatcache (); } } } return; } $path = $this -> current_sitemap_path . 'sitemap-*.xml'; $files = glob ($path); if ($files AND count ($files)) { foreach ($files as $file) { if (file_exists ($file)) { unlink ($file); clearstatcache (); } } } return; } private function getNewFilename ($type, $l_code = '') { $l_code = $l_code ? '-' . $l_code : ''; $path = $this -> current_sitemap_path . 'sitemap-' . $type . $l_code . '-*.xml'; $files = glob ($path); if ($files AND count ($files)) { $last_number = 0; $last_file_name = ''; foreach ($files as $file) { $name = basename ($file); $number = (int) preg_replace ("/[^0-9]/", "", $name); if ($number > $last_number) { $last_number = $number; $last_file_name = $name; } } if ($last_file_name AND file_exists ($this -> current_sitemap_path . $last_file_name)) { $number = $last_number; $new_number = $number + 1; $new_file_name = str_replace ($number, $new_number, $last_file_name); } } else { $new_file_name = 'sitemap-' . $type . $l_code . '-1.xml'; $new_number = 1; } return array ('number'=>$new_number, 'name'=>$new_file_name); } private function writeNumberXMLToDB ($sitemap_file, $id_entity, $type) { if ($type != 'standard') { $db_info = $this -> dataManager -> getMatadata ('EntitiesInDB', array ('sitemap', $type)); $db_info = $db_info['sitemap']; $sql = "UPDATE " . DB_PREFIX . $db_info['table'] . " SET " . $db_info['save']['column'] . " = '" . $sitemap_file . "' WHERE " . $db_info['name_id'] . " = '" . (int) $id_entity . "'"; $this -> db -> query ($sql); } } private function setVars_Common ($entity_cat, $CPBI, $testgenerator, $pack = 0) { $setting = $this -> dataManager -> getSetting (); $this -> setting = $setting['entity']['sitemap'][$CPBI]['setting']; $this -> seo_data = array (); $this -> g_count = 0; $this -> status = false; $this -> pack = $pack; $this -> entity_cat = $entity_cat; $this -> CPBI = $CPBI; $this -> testgenerator = $testgenerator; $this -> stores = $this -> dataManager -> getStores (); if (isset ($this -> request -> post['store_id'])) { $this -> defLanguage = $this -> psm_helper -> getDefaultLanguage ($this -> request -> post['store_id']); } } private function makeUrlElement ($data, $id_entity, $l_code) { $this -> g_count++; $loc_data = $this -> getItemLink ($id_entity, $this -> CPBI, $l_code); $url = $this -> urlset -> appendChild ($this -> dom -> createElement ('url')); $id = $this -> dom -> createAttribute ('id'); $id -> value = $id_entity; $url -> appendChild ($id); $loc = $url -> appendChild ($this -> dom -> createElement ('loc')); $loc -> appendChild ($this -> dom -> createTextNode ($loc_data)); $lastmod = $url -> appendChild ($this -> dom -> createElement ('lastmod')); $lastmod -> appendChild ($this -> dom -> createTextNode (date ("Y-m-d"))); $changefreq = $url -> appendChild ($this -> dom -> createElement ('changefreq')); $changefreq -> appendChild ($this -> dom -> createTextNode ($this -> setting['freq'])); $prioritet = $this -> setting['prioritet'] / 10; $priority = $url -> appendChild ($this -> dom -> createElement ('priority')); $priority -> appendChild ($this -> dom -> createTextNode ($prioritet)); if ($this -> testgenerator) { $this -> dom -> formatOutput = true; $this -> fillSeoData ($data[$l_code]['seo_field']['name'], $l_code, $this -> dom -> saveXML ($url)); } return true; } public function makeIndexFile ($connection = 'NONSSL') { $indexe_files = array (); $url = $this -> dataManager -> getCurrentStoreURL ($connection); foreach ($this -> dataManager -> getStores () as $store) { $this -> setCurrentSitemapPath ($store['store_id']); $index_name = $store['store_id'] == 0 ? 'sitemap.xml' : 'sitemap-' . $store['store_id'] . '.xml'; $sitemap_path = $store['store_id'] == 0 ? 'sitemaps/sitemap/' : 'sitemaps/sitemap-' . $store['store_id'] . '/'; $path = DIR_CATALOG . '../' . $sitemap_path . '*.xml'; $files = glob ($path); $result = array (); if ($files AND count ($files)) { $dom = new DomDocument ('1.0', 'utf-8'); $dom -> appendChild ($dom -> createProcessingInstruction ('xml-stylesheet', 'type="text/xsl" href="sitemaps/index.xsl"')); $sitemapindex = $dom -> appendChild ($dom -> createElement ('sitemapindex')); $xmlns = $dom -> createAttribute ('xmlns'); $xmlns -> value = 'http://www.sitemaps.org/schemas/sitemap/0.9'; $sitemapindex -> appendChild ($xmlns); foreach ($files as $file) { $sitemap = $sitemapindex -> appendChild ($dom -> createElement ('sitemap')); $loc = $sitemap -> appendChild ($dom -> createElement ('loc')); $file_path = $url . $sitemap_path . basename ($file); $loc -> appendChild ($dom -> createTextNode ($file_path)); $lastmod = $sitemap -> appendChild ($dom -> createElement ('lastmod')); $lastmod -> appendChild ($dom -> createTextNode (date ("Y-m-d"))); } $dom -> formatOutput = true; $dom -> save (DIR_CATALOG . '../' . $index_name); $indexe_files[] = array ('url'=>$url . $index_name, 'store'=>$store['name']); } else { if (file_exists (DIR_CATALOG . '../' . $index_name)) { unlink (DIR_CATALOG . '../' . $index_name); clearstatcache (); } } } if (!count ($indexe_files)) { $path = DIR_CATALOG . '../' . 'sitemap*.xml'; $files = glob ($path); if ($files AND count ($files)) { foreach ($files as $file) { if (file_exists ($file)) { unlink ($file); clearstatcache (); } } } } return $indexe_files; } private function getItemLink ($id_entity, $type, $l_code, $store_id = 0) { $_SESSION['siteGenerate'] = true; if ($l_code != 'no_code') { $l_code_session = isset ($this -> session -> data['language']) ? $this -> session -> data['language'] : NULL; $this -> session -> data['language'] = $l_code; } if (isset ($this -> request -> post['store_id']) AND $store_id == 0) { $this -> store_id = $this -> request -> post['store_id']; } else { $this -> store_id = $store_id; } switch ($type) { case 'product': $link = $this -> getLink ('product/product', 'product_id=' . $id_entity); $link = $this -> seo_url -> rewrite ($link); break; case 'category': $link = $this -> getLink ('product/category', 'path=' . $id_entity); $link = $this -> seo_url -> rewrite ($link); break; case 'brand': $link = $this -> getLink ('product/manufacturer/info', 'manufacturer_id=' . $id_entity); $link = $this -> seo_url -> rewrite ($link); break; case 'info': $link = $this -> getLink ('information/information', 'information_id=' . $id_entity); $link = $this -> seo_url -> rewrite ($link); break; case 'standard': break; } if ($l_code != 'no_code') { $this -> session -> data['language'] = $l_code_session; } unset ($_SESSION['siteGenerate']); unset ($this -> store_id); return htmlspecialchars_decode ($link); } public function getLink ($route, $args = '', $connection = 'NONSSL') { if ($this -> store_id == 0) { $http = HTTP_CATALOG; $https = HTTPS_CATALOG; } else { $store = $this -> dataManager -> getStoreId ($this -> store_id, $this -> stores); $http = rtrim ($store['url'], '/') . '/'; $https = rtrim ($store['ssl'], '/') . '/'; } if ($connection == 'NONSSL') { $url = $http; } else { $url = $https; } $this -> config -> set ('config_url', $http); $this -> config -> set ('config_ssl', $https); $url .= 'index.php?route=' . $route; if ($args) { $url .= str_replace ('&', '&amp;', '&' . ltrim ($args, '&')); } return $url; } private function saveProcess ($p_id, $name, $text, $rating, $interval) { $this -> status = true; $sql = "INSERT INTO " . DB_PREFIX . "review SET author = '" . $this -> db -> escape ($name) . "', customer_id = '0', product_id = '" . (int) $p_id . "', text = '" . $this -> db -> escape ($text) . "', rating = '" . (int) $rating . "', date_added = NOW()-INTERVAL " . $interval . " DAY, status = 1, auto_gen = 1;"; $this -> db -> query ($sql); } public function fillSeoData ($name, $l_code, $seo_string) { $active_lang_code = $this -> psm_helper -> getDefaultLanguage (); $hide = $active_lang_code <> $l_code ? 'style="display:none;"' : ''; $this -> seo_data[] = '<tr ' . $hide . ' class= "lang-' . $l_code . '">' . $this -> addTD ($name) . $this -> addTD ($seo_string, '', true) . '</tr>'; } private function endSeoData ($CPBI) { $language_text = $this -> language -> load ('module/psmsitemapgenerator'); $header = '      <tr>       <th>' . $language_text['text_entity_name_' . $CPBI] . ' name</th>       <th>sitemap url</th>      </tr>      '; array_unshift ($this -> seo_data, $header); $this -> seo_data[] = '<tr><th colspan="3">...etc.</th></tr>'; } public function addTD ($text, $attr = '', $pre = false) { if ($pre) { $text = "<pre>" . str_replace ('amp;', '', htmlspecialchars ($text)) . "</pre>"; } return "<td " . $attr . ">" . $text . "</td>"; } } ?>
