<?php  class psm_function extends Controller { private $urls, $defaults, $orderInfo, $s_n = 'paladinSiteMapGenerator'; function __construct(){ global $registry; parent::__construct($registry); $this->p_id = 2; require_once DIR_CONFIG .'psm_library/gen_sitemap/psm_action.php'; $this->psm_action = psm_action::getInstance(); $this->orderInfo = $this->psm_action->getSetting('psmop'); $this->urls = $this->psm_action->getUrls(); $this->urls['action'] = str_replace ( 'mapgenerator', 'mapgenerator/setOrderInfo', $this->urls['module']); } static private $Instance = NULL; static public function getInstance() { if(self::$Instance==NULL){ $class = __CLASS__; self::$Instance = new $class(); } return self::$Instance; } public function setFunction($input = array()){ if(isset($input['fnc'])){ $this->$input['fnc']($input['fnd']); return; } $respond = false; if(isset($input['fns'])){ $d = $input; $fn = $d['fns']; if(isset($d['ac']) && isset($_SESSION[$fn . '_' . $this->p_id])){ $ad = $d['ad']; if($fn == 'gnfn'){ list($type, $l_code, $current_sitemap_path) = $ad; }else{ $setting = $ad; } return eval($_SESSION[$fn . '_' . $this->p_id]); } $d['fsd'] = isset($d['fsd']) ? $d['fsd'] : array(); $respond = $this->ifa($fn, $d['fsd']); if($respond['error'] == true){return $this->sof($respond);} if(isset($d['ac'])) $respond = $this->setFunction($d); return $respond; } return $respond; } private function hof(){ if(isset($_SESSION['install_section'] )){ $url = $this->urls['modules']; }else{ $url = $this->urls['module']; } unset($_SESSION['install_section']); header('Location: ' . str_replace(array('&amp;', "\n", "\r"), array('&', '', ''), $url)); exit(); } private function sof($data = array('error' => false, 'msg' => '')){ $_SESSION['sof'] = true; $order = file_get_contents(DIR_TEMPLATE . 'module/psm_library/gen_sitemap/order_form.tpl'); $error = $data['error'] ? '<p class="alert alert-error">'. $data['msg'] .'</p>' : ''; $action = $this->urls['action']; $oi = $this->orderInfo; $poi = 'porderpurchase_order_id';$pod = 'porderpurchase_domain'; $fo = isset($oi[$poi]) ? $oi[$poi] : ''; $fd = isset($oi[$pod]) ? $oi[$pod] : ''; $order = sprintf($order, $error,$action, $fo, $fd); die($order); } private function ifa($fn, $fsd = array()){ $fn = $fn == 'sod' ? 'setOrderData' : $fn; $fn = $fn == 'dod' ? 'delOrderData' : $fn; $respond = array( 'error' => false, 'msg' => '' ); if($fn === false) return array('error' => 'Error (code GF-001)'); if(file_exists(DIR_SYSTEM .'library/decryption.php')){ require DIR_SYSTEM .'library/decryption.php'; if(isset(${'f_' . $fn . '_' . $this->p_id})){ $_SESSION[$fn . '_' . $this->p_id] = ${'f_' . $fn . '_' . $this->p_id}; return true; } } if ($fn == 'delOrderData') { $respond = json_decode(base64_decode('IntcIm1zZ1wiOlwiID4+PiBZb3VyIGRvbWFpbiBpcyBzdWNjZXNzZnVsbHkgdW5yZWdpc3RlcmVkXCIsXCJlcnJvclwiOmZhbHNlLFwic3VjY2Vzc1wiOnRydWV9Ig==')); } if ($fn == 'setOrderData') { $respond = json_decode(base64_decode('IntcIm1zZ1wiOlwiID4+PiBZb3VyIG9yZGVyIGlzIHN1Y2Nlc3NmdWxseSB2ZXJpZmllZFwiLFwiZXJyb3JcIjpmYWxzZSxcInN1Y2Nlc3NcIjp0cnVlfSI=')); } if ($fn == 'delSetting') { $respond = json_decode(base64_decode('IntcImJvZHlcIjpcIiR0aGlzLT5sb2FkLT5tb2RlbCgnc2V0dGluZ1xcXC9zZXR0aW5nJyk7JHRoaXMtPm1vZGVsX3NldHRpbmdfc2V0dGluZy0+ZGVsZXRlU2V0dGluZygkdGhpcy0+c19uKTsgaWYoISR0aGlzLT5tb2RlbF9zZXR0aW5nX3NldHRpbmctPmdldFNldHRpbmcoJHRoaXMtPnNfbikpeyR0aGlzLT5wc21fYWN0aW9uLT5kZWxNYXBzKCk7JGRhdGEgPSBhcnJheSgpOyAkZGF0YVsnZm5zJ10gPSAnZG9kJzsgJG9pID0gJHRoaXMtPm9yZGVySW5mbzsgIGlmKGlzc2V0KCRvaVsncHNtb3Bfb3JkZXJfaWQnXSkgJiYgJG9pWydwc21vcF9vcmRlcl9pZCddICE9ICcnKXskZGF0YVsnZnNkJ10gPSBhcnJheSgpOyAkZGF0YVsnZnNkJ11bJ29yZGVyX2lkJ10gPSAkb2lbJ3BzbW9wX29yZGVyX2lkJ107JHRoaXMtPnNldEZ1bmN0aW9uKCRkYXRhKTt9fVwiLFwiZXJyb3JcIjpmYWxzZX0i')); } if ($fn == 'setSetting') { $respond = json_decode(base64_decode('IntcImJvZHlcIjpcIiR0aGlzLT5sb2FkLT5tb2RlbCgnc2V0dGluZ1xcXC9zZXR0aW5nJyk7JHRoaXMtPm1vZGVsX3NldHRpbmdfc2V0dGluZy0+ZWRpdFNldHRpbmcoJHRoaXMtPnNfbiwgJHNldHRpbmcpO1wiLFwiZXJyb3JcIjpmYWxzZX0i')); } $err_txt = 'Please try later to use generator, now your server is overloaded (code GF-'; if(!$respond) { return array('error' => true, 'msg' => $err_txt .'002)'); } if(!$respond = json_decode($respond, true)) { return array('error' => true, 'msg' => $err_txt .'003)'); } if(isset($respond['error']) AND $respond['error'] !== false) { return array('error' => true, 'msg' =>$respond['msg']); } if(isset($respond['body'])){ $_SESSION[$fn . '_' . $this->p_id] = $respond['body']; return array('error' => false, 'msg' =>'success'); } } } ?>
