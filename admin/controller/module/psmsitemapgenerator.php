<?php class ControllerModulePsmSitemapGenerator extends Controller { private $name_prod ="Paladin SEO - Sitemap Generator";private $dir_module ='psm_library/gen_sitemap/';private $module_name ='module/psmsitemapgenerator';private $module_template='module/psm_library/gen_sitemap/template.tpl';private $dataManager;private $psm_helper;private $error =array();private $success =array();function __construct(){ global $registry;parent::__construct($registry);require_once DIR_CONFIG.$this->dir_module.'data_manager.php';$this->dataManager=dataManager::getInstance();require_once DIR_CONFIG.$this->dir_module.'psm_helper.php';$this->psm_helper=psm_helper::getInstance();} public function install() { $_SESSION['install_section']=1;$this->checkInstallSetting();} public function uninstall(){ $this->dataManager->delSetting();} private function checkInstallSetting(){ $this->load->model('setting/setting');if(!$this->model_setting_setting->getSetting('paladinSiteMapGenerator')){ $data=$this->dataManager->get_data();$this->dataManager->setSetting($data);$this->dataManager->setTable();} } public function index($template='index.tpl') { $this->checkInstallSetting();$this->data=$this->language->load('module/psmsitemapgenerator');$this->document->setTitle($this->language->get('heading_title'));$this->addScriptStyle();$this->data['breadcrumbs']=$this->getBreadCrumbs();$this->setDataForInterface();$this->setURLs();$this->load->model('design/layout');$this->data['layouts']=$this->model_design_layout->getLayouts();$this->template=$this->module_template;$this->children=array( 'common/header','common/footer' );$this->psm_helper->setFunction(array('fns'=> 'setSetting'));$this->response->setOutput( $this->render() );} private function saveSetting ($data,$metaData,$additionData){ if(!is_array($data))return 'All done!';$active_data =$this->dataManager->getSetting();$new_data=array_replace_recursive ($active_data,$data);$this->dataManager->setSetting($new_data);return 'Saving done!';} public function ajax(){ list($request_data,$request_metaData,$request_additionData)=$this->parsePostAndGet();$this->$request_metaData['action']($request_data,$request_metaData,$request_additionData);} private function parsePostAndGet(){ $this->request->post=array_replace_recursive($this->request->post,$this->request->get);$data=array();$data[0]=isset($this->request->post['data']) ? $this->request->post['data']:'';$data[1]=isset($this->request->post['metaData']) ? $this->request->post['metaData']:'';$data[2]=isset($this->request->post['additionData']) ? $this->request->post['additionData']:'';return $data;} private function testGenerate($data,$metaData,$additionData=''){ $entityData=$this->parseEntity($metaData['entity']);$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];$gen_data=$this->processGenerate($data,$metaData,$additionData,true);$data=array( 'total_items' => $gen_data['count'],'total_time'=> $gen_data['time'],'seo_text' => implode(' ',$gen_data['seo_data']),'status' => 'ajax-reload' );echo json_encode($data);} private function prepareGenerate($data,$metaData,$additionData=''){ $this->dataManager->clearCache();$this->saveSetting ($data,$metaData,$additionData);$entityData=$this->parseEntity($metaData['entity']);$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];$this->dataManager->getCPBI($entity_name,$entity_cat);$total_items =$this->dataManager->getTotalItems($entity_name,$entity_cat);if($entity_name=='standard'){ $total_items=42;$total_genPack=0;}else{ $total_genPack=$this->dataManager->getGenPackTotal($entity_name,$entity_cat);} $total_text='Found '.$total_items.' items for generating.';$confirm_text='Please, confirm the start process of generator.';$confirm_text.='<p class="info-area">You can click on "Testing generator" and see result work SEO generator on a few random items for check desired result. After that you can corrected template or click on button "Start generate". </p>';$data=array( 'total_items' => $total_items,'total_genPack'=> $total_genPack,'total_text'=> $total_text,'confirm_text'=> $confirm_text );echo json_encode($data);} private function startGenerate($data,$metaData,$additionData=''){ $sitemap_data=array('google_sitemap_status'=> 0);$this->load->model('setting/setting');$this->model_setting_setting->editSetting('google_sitemap',$sitemap_data);if(!isset($this->request->post['gen_mode_allitems'])){ $this->dataManager->setTotalGenerate(0,0);} $this->saveSetting ($data,$metaData,$additionData);$entityData=$this->parseEntity($metaData['entity']);$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];$this->parsePostAndGet();include_once DIR_CONFIG.$this->dir_module.'sitemap_generator.php';$sitemap_generator=sitemap_generator::getInstance();$sitemap_generator->clear($entityData);$sitemap_generator->delFile($entityData['entity']['name']);$data=array( 'process' => 'go' );echo json_encode($data);} private function processGenerate($data,$metaData,$additionData='',$testgenerator=false){ $entityData=$this->parseEntity($metaData['entity']);$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];if(!isset($metaData['pack'])){ $metaData['pack']=0;} $CPBI_data=$this->dataManager->getCPBI($entity_name,$entity_cat,$metaData['pack']);if(!$testgenerator){ if($CPBI_data['total'] !=0 OR ($metaData['pack']==0 AND $entity_name=='STAN_urls')){ $process='go';}else{ $process='stop';} echo json_encode(array('process'=> $process,'pack'=> $metaData['pack']));if($process=='stop'){ return false;} } $store_id=isset($this->request->post['store_id']) ? $this->request->post['store_id']:0;$this->dataManager->setEntityStatus(true,$entity_cat,$entity_name,$store_id);$this->dataManager->setCategoryEntityStatus();include_once DIR_CONFIG.$this->dir_module.'sitemap_generator.php';$sitemap_generator=sitemap_generator::getInstance();$data=array( 'entity_cat' => $entity_cat,'entity_name'=> $entity_name,'testgenerator'=> $testgenerator,'additionData'=> $additionData,'pack' => $metaData['pack'] );$gen_data=$sitemap_generator->generate($data);$this->dataManager->addTotalGenerate($gen_data['count'],$gen_data['time']);return $gen_data;} private function endGenerate($data,$metaData,$additionData=''){ $entityData=$this->parseEntity($metaData['entity']);$entityData['internal_entity']='';$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];$store_id=isset($this->request->post['store_id']) ? $this->request->post['store_id']:0;$this->dataManager->setEntityStatus(true,$entity_cat,$entity_name,$store_id);$this->dataManager->setCategoryEntityStatus();$this->data=$this->language->load('module/psmsitemapgenerator');$gen_data=$this->dataManager->getTotalGenerate();include_once DIR_CONFIG.$this->dir_module.'sitemap_generator.php';$sitemap_generator=sitemap_generator::getInstance();$sitemap_generator->makeIndexFile();$index_files=$this->dataManager->getIndexFiles();$data=array( 'total_items' => $gen_data['count'],'total_time'=> $gen_data['time'],'alert_text'=> sprintf($this->language->get('alert_'.$metaData['action']),$entityData['category']['text_name'],$entityData['entity']['text_name'],$gen_data['count']),'status' => 'refresh','entityData'=> $entityData,'genStatus' => true,'power' => $this->dataManager->getTotalPower(),'index_files'=> $index_files );$this->dataManager->setTotalGenerate(0,0);echo json_encode($data);} private function prepareClearGenerate($data,$metaData,$additionData=''){ $entityData=$this->parseEntity($metaData['entity']);$data=$this->dataManager->getCPBI($entityData['entity']['name'],$entityData['category']['name']);$total_text='Found '.$data['total'].' items for clearing.';$confirm_text=$entityData['entity']['name']=='all' ? 'Please, confirm start clearing '.$entityData['category']['text_name'].' for all pages':'Please, confirm start clearing '.$entityData['category']['text_name'].' for pages of '.$entityData['entity']['text_name'];$data=array( 'total_items' => $data['total'],'total_text'=> $total_text,'confirm_text'=> $confirm_text );echo json_encode($data);} private function startClearGenerate($data,$metaData,$additionData=''){ $entityData=$this->parseEntity($metaData['entity']);$entityData['internal_entity']='';include_once DIR_CONFIG.$this->dir_module.'sitemap_generator.php';$sitemap_generator=sitemap_generator::getInstance();$clear_data=$sitemap_generator->clear($entityData);$sitemap_generator->delFile($entityData['entity']['name']);$store_id=isset($this->request->post['store_id']) ? $this->request->post['store_id']:0;$this->dataManager->setEntityStatus(false,$entityData['category']['name'],$entityData['entity']['name'],$store_id);$this->dataManager->setCategoryEntityStatus();$sitemap_generator->makeIndexFile();$index_files=$this->dataManager->getIndexFiles();$data=array( 'total_items' => $clear_data['total_count'],'total_time'=> $clear_data['total_time'],'alert_text'=> sprintf($this->language->get('alert_'.$metaData['action']),$entityData['category']['text_name'],$entityData['entity']['text_name'],$clear_data['total_count']),'status' => 'refresh','entityData'=> $entityData,'genStatus' => false,'power' => $this->dataManager->getTotalPower(),'index_files'=> $index_files );echo json_encode($data);} public function setOrderInfo() { $data['order_id'] =$this->request->post['order_id'] !='' ? $this->request->post['order_id']:false;$data['domain'] =$this->request->post['domain'] !='' ? $this->request->post['domain']:false;if($data['order_id']===false || $data['domain'] ===false){ $this->psm_helper->setFunction(array('fnc'=> 'sof','fnd'=> array('error'=> true,'msg'=> 'Try again: you must fill  both field - order ID and Domain')));}else{ $this->load->model('setting/setting');$this->model_setting_setting->editSetting('psmop',array('psmop_order_id'=> $data['order_id'],'psmop_domain'=> $data['domain']));$respond=$this->psm_helper->setFunction(array('fns'=> 'sod','fsd'=> $data));if($respond['error']==true){ $this->psm_helper->setFunction(array('fnc'=> 'sof','fnd'=> $respond));}else{ $this->psm_helper->setFunction(array('fnc'=> 'hof','fnd'=> true));} } } private function save($data,$metaData,$additionData=''){ $alert=$this->saveSetting ($data,$metaData,$additionData);$this->respondAnswer($metaData,$alert);} private function getModal($data,$metaData,$additionData){ $this->data=$this->language->load('module/psmsitemapgenerator');if(isset($additionData['function'])){ $function=$additionData['function'];$func_data=isset($additionData['data']) ? $additionData['data']:'';call_user_func(array($this,$function),$func_data);} $this->setDataForInterface();$this->setURLs();$this->load->model('design/layout');$this->data['layouts']=$this->model_design_layout->getLayouts();$this->template='/module/psm_library/gen_sitemap/modal/'.$data['m_name'].'.tpl';$this->response->setOutput( $this->render() );} private function changeAutoGenerate($data,$metaData,$additionData=''){ $this->saveSetting ($data,$metaData,$additionData);echo 1;} private function respondAnswer($metaData,$alert='',$data='',$status=true){ if(isset($metaData['entity'])){ $entityData=$this->parseEntity($metaData['entity']);$this->language->load('module/psmsitemapgenerator');;if(!isset($this->request->post['additionData']['save_replacing_table'])){ $alert=sprintf($this->language->get('alert_'.$metaData['action']),$entityData['category']['text_name'],$entityData['entity']['text_name']);} } $respond=array( 'status' => $status,'data' => $data,'alert' => $alert );echo json_encode($respond);} private function parseEntity ($entityData){ $this->language->load('module/psmsitemapgenerator');;$entityData=explode("-",$entityData);$respond_entity['category']=array( 'name' => $entityData[0],'text_name'=> $this->language->get('text_category_name_'.$entityData[0]) );$respond_entity['entity']=array( 'name' => $entityData[1],'text_name'=> $this->language->get('text_entity_name_'.$entityData[1]) );return $respond_entity;} private function setDataForInterface(){ $active_data =$this->dataManager->getSetting();$this->data['languages']=$this->psm_helper->getLanguages();$this->data['active_lang_code']=$this->psm_helper->getDefaultLanguage();$this->data['active_lang_id'] =$this->psm_helper->getLang_Code_Id($this->data['active_lang_code']);$this->data['stores'] =$this->dataManager->getStores();$this->data['MD_CategoryEntites'] =$this->dataManager->getMatadata('CategoryEntites');$this->data['direction'] =$this->language->get('direction');$def_data =$this->dataManager->get_data();$this->data['version'] =$def_data['version'];$this->data['active_data'] =$active_data;$this->data['HTTP_SERVER'] =HTTP_SERVER;$this->data['index_files'] =$this->dataManager->getIndexFiles();$this->data['token'] =$this->session->data['token'];$this->data['paladin'] =$this->dataManager->isPaladin() ? $this->url->link('module/superseobox','token='.$this->session->data['token'],'SSL'):'';} private function setURLs(){ $urls=array( 'action'=> $this->url->link('module/psmsitemapgenerator','token='.$this->session->data['token'],'SSL'),'info'=> $this->url->link('module/psmsitemapgenerator/info','token='.$this->session->data['token'],'SSL'),'cancel'=> $this->url->link('extension/module','token='.$this->session->data['token'],'SSL'),'ajax'=> $this->url->link('module/psmsitemapgenerator/ajax','token='.$this->session->data['token'],'SSL'),'support'=> 'https://linkonym.appspot.com/?http://smartshopbox.com/support/getproducts/','about_info'=> $this->url->link('module/psmsitemapgenerator/ajax','token='.$this->session->data['token'].'&metaData[action]=getModal&data[m_name]=about_info','SSL'),'about_url'=> 'https://linkonym.appspot.com/?http://smartshopbox.com/support/getproducts.php?exception=psm-sitemap' );if($this->dataManager->isPaladin()){ $urls['paladin']=$this->url->link('module/superseobox/index','token='.$this->session->data['token'],'SSL');} $this->data['urls']=$urls;} private function addScriptStyle(){ $this->document->addScript( 'view/stylesheet/psm_library/bootstrap/js/bootstrap.min.js' );$this->document->addStyle( 'view/stylesheet/psm_library/bootstrap/css/bootstrap.min.css' );$this->document->addStyle( 'view/stylesheet/psm_library/bootstrap/css/bootstrap-responsive.min.css' );$this->document->addScript( 'view/javascript/psm_library/plugin/grider.js');$this->document->addScript( 'view/javascript/psm_library/plugin/prettify/prettify.js');$this->document->addScript( 'view/javascript/psm_library/plugin/cookie_jq.js' );$this->document->addScript( 'view/javascript/psm_library/plugin/block_ui.js' );$this->document->addScript( 'view/javascript/psm_library/plugin/iphone-style-checkboxes.js');$this->document->addScript( 'view/javascript/psm_library/gen_sitemap.js' );$this->document->addStyle( 'view/stylesheet/psm_library/gen_sitemap.css' );} private function getBreadCrumbs(){ $this->language->load('module/psmsitemapgenerator');$breadcrumbs=array();$breadcrumbs[]=array( 'text' => $this->language->get('text_home'),'href' => $this->url->link('common/home','token='.$this->session->data['token'],'SSL'),'separator'=> false );$breadcrumbs[]=array( 'text' => $this->language->get('text_module'),'href' => $this->url->link('extension/module','token='.$this->session->data['token'],'SSL'),'separator'=> ' :: ' );$breadcrumbs[]=array( 'text' => $this->language->get('heading_title'),'href' => $this->url->link('module/psmsitemapgenerator','token='.$this->session->data['token'],'SSL'),'separator'=> ' :: ' );return $breadcrumbs;} private function validate() { return true;} } if (!function_exists('array_replace_recursive')) { function array_replace_recursive($array,$array1) { $args=func_get_args();$array=$args[0];if (!is_array($array)) { return $array;} for ($i=1;$i < count($args);$i++) { if (is_array($args[$i])) { $array=recurse($array,$args[$i]);} } return $array;} function recurse($array,$array1) { foreach ($array1 as $key=> $value) { if (!isset($array[$key]) || (isset($array[$key]) && !is_array($array[$key]))) { $array[$key]=array();} if (is_array($value)) { $value=recurse($array[$key],$value);} $array[$key]=$value;} return $array;} } ?>
